/*
 * Copyright 2007 - 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.haxecommons.async.operation.event;
import openfl.events.Event;
import org.haxecommons.async.operation.IOperation;

/**
 * An <code>OperationEvent</code> is an <code>Event</code> generated by an <code>IOperation</code> instance.
 * @author Christophe Herreman
 */
class OperationEvent extends Event {
	
	/**
	 * The type of the <code>OperationEvent</code> dispatched when an <code>IOperation</code> is done/complete.
	 */
	public static var COMPLETE = "operationComplete";
	
	/**
	 * The type of the <code>OperationEvent</code> dispatched when an error occurs during the execution of an <code>IOperation</code>
	 */
	public static var ERROR = "operationError";
	
	/**
	 * The type of the <code>OperationEvent</code> dispatched upon progress of the <code>IProgressOperation</code>
	 */
	public static var PROGRESS = "operationProgress";
	
	/**
	 * The type of the <code>OperationEvent</code> dispatched when an <code>IOperation</code> times out.
	 */
	public static var TIMEOUT = "operationTimeout";
	
	public static function createCompleteEvent(operation:IOperation, ?bubbles:Bool, ?cancelable:Bool):OperationEvent {
		return new OperationEvent(OperationEvent.COMPLETE, operation, bubbles, cancelable);
	}

	public static function createErrorEvent(operation:IOperation, ?bubbles:Bool, ?cancelable:Bool):OperationEvent {
		return new OperationEvent(OperationEvent.ERROR, operation, bubbles, cancelable);
	}

	public static function createProgressEvent(operation:IOperation, ?bubbles:Bool, ?cancelable:Bool):OperationEvent {
		return new OperationEvent(OperationEvent.PROGRESS, operation, bubbles, cancelable);
	}

	public static function createTimeoutEvent(operation:IOperation, ?bubbles:Bool, ?cancelable:Bool):OperationEvent {
		return new OperationEvent(OperationEvent.TIMEOUT, operation, bubbles, cancelable);
	}
	
	/**
	 * Creates a new <code>OperationEvent</code> instance.
	 * @param type The type of the current <code>OperationEvent</code>, can be either <code>OperationEvent.COMPLETE</code>,
	 * <code>OperationEvent.ERROR</code> or <code>OperationEvent.PROGRESS</code>.
	 * @param operation The <code>IOperation</code> that generated the current <code>OperationEvent</code>.
	 */
	public function new(type:String, operation:IOperation, ?bubbles:Bool, ?cancelable:Bool) {
		super(type, bubbles, cancelable);
		this.operation = operation;
	}
	
	/**
	 * Creates a new <code>OperationEvent</code> instance.
	 * @param type The type of the current <code>OperationEvent</code>, can be either <code>OperationEvent.COMPLETE</code>,
	 * <code>OperationEvent.ERROR</code> or <code>OperationEvent.PROGRESS</code>.
	 * @param operation The <code>IOperation</code> that generated the current <code>OperationEvent</code>.
	 */
	public var operation(default, default):IOperation;
	
	/**
	 * @return The result of the <code>IOperation</code> that generated the current <code>OperationEvent</code>.
	 */
	public var result(get , null):Dynamic;
	inline function get_result():Dynamic return operation != null ? operation.result : null;
	
	/**
	 * @return The error of the <code>IOperation</code> that generated the current <code>OperationEvent</code>.
	 */
	public var error(get, null):Dynamic;
	inline function get_error():Dynamic  return operation != null ? operation.error : null;
	
	/**
	 * @return An exact copy of the current <code>OperationEvent</code>
	 */
	public override function clone():Event return new OperationEvent(type, operation, bubbles, cancelable);
}